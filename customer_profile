with ec_order AS (
    select
           id as order_id,
           name as order_source_orderid, -- source system order id ebms_order_number
           ebms_order_number__c as order_source_orderid_1, -- source system order id redudent of name
           ebms_cruise_id__c as order_cruise_id,
           opportunity__c as order_opportuniy, -- fk for joining to the opportunity, an order may not have any opportunity association
            account__c as order_accountfk, -- foreign key to tie order to account. QQ - can an order be tied to multiple account???
            contact__c as order_contactfk, -- foreign key to tie order to account. QQ - can an order be tied to multiple contacts???
            city__c as order_event_city, -- City Event occured
            brand__c as order_ec_brand, -- EC have brand business units like Odyssey, Spirit, Bateaux,ect.
            cruise_date__c as order_cruise_date, -- Date of Cruise event
            cruise_date_fiscal_year__c as order_event_year, -- Year event occured comes from object
            cruise_date_fiscal_quarter__c as order_event_quarter, --Quarter Event occured comes from event object
            cruise_title__c as order_cruise_title, -- Title of the cruise event
            ownerid as order_ownerid,
            account_email__c as order_account_email, -- Email Account associated with the Account tied to the order
            status__c as order_status, -- order status (used for revenue) - true status -'Canceled','Active','Tentative','Closed'
            phone__c as order_phone,
            order_owner__c as order_owner,
            cruise_type__c as order_cruise_type,
            order_gross__c as order_gross_amount, -- Order amount including taxes
            order_net__c as order_net_amount,
            taxes__c as order_taxes, --tax amount of the order
            taxable__c as istaxable, -- Whether or not order is taxable
           pax__c as order_pax,
           reportable_total__c as order_reportable_total -- Reportable Order amount including taxes
    from customer_staging.sf_ec_order__c
     --where
           --cruise_date_fiscal_year__c between 2018 AND 2019
       --and reportable_total__c <> order_net__c
    --and
     --  status__c not in ('Canceled','Active','Tentative')


),
     hce_orders AS (
         SELECT id                  AS order_id,
                event_name__c       AS order_event_name,         -- name of event (formula field in SF - pulls name field from event object) *
                event_type__c       AS order_event_type,         -- type of event (formula field in SF - pulls usi_class field from event object) *
                event_port__c       AS order_event_port,         -- port for event (formula field in SF - pulls usi_category field from event object) *
                event_region__c     AS order_event_region,       -- region for event (formula field in SF - pulls region field from event object) *
                order_number__c     AS order_number,             -- order number (holds the order_number from the source transactional system and maps to either centaman_id or usi_id) *
                usi_id__c           AS order_usi_id,             -- helm order id (the helm external id - indexed and unique - order id within helm - have 10/ prefix) *
                usi_order_number__c AS order_number_usi,         -- order number generated by helm (most likely the order number w/o the 10/ prefix) *
                ordernumber         AS order_number_salesforce,  -- order number generated by SalesForce (system controlled and generated) *
                order_date__c       AS order_date,               -- order date (date / time field - it should end at midnight - all dates stored as UTC) - order date counts as revenue date - (order/booking date) *
                order_date_fx__c    AS order_date_formula,       -- order date (date data type with no time component adds 1 day to the date to display correctly in SalesForce) - order date counts as revenue date *
                order_amount__c     AS order_total,              -- order total including tax and fees *
                sales_tax__c        AS order_sales_tax,          -- populated directly with the sales tax on the order (ticket price is subtotal, fees like a landing/service fee, sales tax based on what items are taxable, grand total) -- total minus the sales tax so subtotal + fees - Grand Total Including Tax (dawn estimates sales tax at 6%)
                fees__c             AS order_fees,               -- fees like landing/service fee
                order_before_tax__c AS order_before_tax,         -- subtotal + fees excluding sales tax
                product_order_amount_including_tax__c AS order_amount_including_tax, --rollup field in salesforce (aggregates values in child records - goes from the order object to the order item object and is looking at a field on order item object called total price including tax and adding that up)
                ordered_total__c    AS order_ordered_total, --  should be the same as the grand_total (order amount including tax and fees) -- may want to revisit
                payments__c         AS order_payments_c, -- sum of payments --- what people have paid for their order
                accountid           AS order_account_id,         -- account id - fk way to connect to account table *
                billtocontactid     AS order_bill_to_contact_id, -- contact id - fk way to connect to contact table *
                eventid__c          AS order_event_id,           -- event id - fk way to connect to event table *
                bm_orderid__c       AS order_bytemark_id,        -- nyc ferry order id - way to identify if you NYCF customer *
                order_status__c     AS order_status,             -- order status (used for revenue) - true status - Canceled (X), Hold (H), Closed (C), Active (A) - Centaman the status can be whatever as its calculated - Active, Canceled, Hold. Helm statuses are Active, Closed, Hold, Canceled, Lost Sale *
                event_status__c     AS order_event_status,       -- event status (used for revenue) - Helm: long list, Centaman: Lost Sale, Confirmed *
                opportunityid       AS order_opportunity_id,      -- opportunity id - fk way to connect to the opportunity table *
                event_start_date_day_of_week__c AS order_event_start_day_of_week, -- day of the week the event started
                event_start_date_month__c AS order_event_start_date_month, -- formula that looks up the event start date and gets the month
                event_start_date_and_time__c AS order_event_start_date_and_time, -- formula that looks up the event object and copies it down to the order to make it easy to report on - redundant with the event object event_start_date_time
                event_anchor_venue__c AS order_event_anchor_evenue, -- looks up the event and copies the value of the USI anchor venue field - redundant by joining to the event object
                contact_first_name__c AS order_contact_first_name, -- redundant with contact object first name field
                contact_last_name__c AS order_contact_last_name, -- redundant with contact object last name field
                contactid__c         AS order_contact_id, -- foreign key to the contact record but use bill to contact id
                description     AS order_description, -- order description - nothing coming from helm - some booking notes from centaman -- skip
                event_pier__c AS order_event_pier -- redundant off of the events - field on events that is called event__c and this is just a formula that copies it down
         FROM customer_staging.sf_hce_customer_order

     ),
     ec_account as(
    Select
                id as acct_id,
                market_segment__c as acct_mkt_segment,-- Along with market_subsegment__c, market_segment__c Helps identify whether the account is individual, groups, corporate,trac=vel agency, etc.
                market_subsegment__c as acct_subsegment,-- Along with market_segment__c, market_subsegment__c Helps identify whether the account is individual, groups, corporate,trac=vel agency, etc.
                name as acct_name,
                persondonotcall as acct_phone_DNC,
                personcontactid as acct_cnct_pk,
                type as acct_type,
                recordtypeid,--QQ where does this link to???
                billingcity as acct_billingcity,
                billingstreet as acct_billing_street,
                billingpostalcode as acct_billing_cd,
                billingstate as acct_billing_state,
                billingcountrycode as acct_billing_country_cd,
                billingcountry as acct_billing_country,
                personmailingcountry as acct_person_mailing_country,
                phone as account_phone,
                ownerid as acct_ownerid,
                account_region__c as acct_region,
                account_status__c as acct_status,
                lastname as acct_lname,
                firstname as acct_fname,
                contact_region__pc as acct_cnct_region,
                personemail as acct_email,
                personhasoptedoutofemail as acct_email_opt_out,
                ebms_contact_number__pc as source_cnctid,
                site as acct_site,
                ispersonaccount as acct_isperson,
                ownership as acct_company_ownership,
                accountsource as acct_source
from customer_staging.sf_ec_account

), hce_accounts AS (
                SELECT id                               AS account_id,   -- account primary key *
                name                             AS account_name, -- account name *
                usi_state__c                     AS account_state, -- redundant state value x transfer straight over from helm
                usi_company__c                   AS account_company, -- redundant company name

                phone                            AS account_phone, -- business phone number

                billingcity                      AS account_city, -- business billing city is what we populate as primary address

                billingstate                     AS account_billing_state, -- business billing address --- these are the correct addresses to use
                billingstreet                    AS account_billingstreet, -- business billing street ---- anything in account object think of as an actual organization except for social accounts which are individual contacts where the same information can be found there -- in future its person account

                billingcountry                   AS account_billingcountry, -- billing country

                billingpostalcode                AS account_billing_postalcode, -- billing postal code

                usi_phone__c                     AS account_phone, --should be the same as the phone - may not be redundant all the time
                website                          AS account_website, -- website for the business
                usi_usertext02__c                AS account_usertext02, -- just a referral code

                ownership                        AS account_ownership -- business ownership - picklist (public, private, subsidiary or other)
         FROM customer_staging.sf_hce_customer_account
), ec_contact
         AS (
        select id                     as cnct_id,
               accountid              as cnct_acct_fk,
               donotcall              as cnct_DNC,
               ispersonaccount        as cnct_isperson,
               lastname               as cnct_lname,
               firstname              as cnct_fname,
               department             as cnct_department,
               name                   as cnct_name,
               mailingstreet          as cnct_mail_street,
               mailingcity            as cnct_mail_city,
               mailingstate           as cnct_mail_state,
               mailingpostalcode      as cnct_mail_postcode,
               mailingstatecode       as cnct_mail_statecode,
               mailingcountry         as cnct_mail_country,
               email                  as cnct_email,
               hasoptedoutofemail     as cnct_email_optout,
               ownerid                as cnct_ownerid,
               contact_region__c      as cnct_region,
               market_subsegment__c   as cnct_mkt_subsegment,
               phone                  as cnct_phone,
               mobilephone            as cnct_mobile,
               donotcall              as contact_DNC,
               contact_strategy__c    as cnct_strategy,
               ebms_contact_number__c as cnct_sourceid,
               title                  as cnct_title -- Organizational Title e.g. President, CEO, etc.
        from customer_staging.sf_ec_contact
    ), hce_contact AS(
        SELECT
               id                                          AS contact_id,           -- contact primary key *
                account_name__c                            AS contact_account_name, -- account name for contact *
                full_name__c                               AS contact_cust_fullname,    -- customers name *
                name                                       AS contact_name, -- combination of the first name and last name (will be the same as full_name)
                firstname                                  AS contact_first_name, -- contact firstname
                lastname                                   AS contact_last_name, -- contact lastname
                email                                      AS contact_email,        -- customers email *
                phone                                      AS contact_phone, -- contact phone
                mailingstate                               AS contact_mailing_state, -- mailing address and a other address - the mailing address is for sending correspondence and the shipping address is a different address where you can ship big items
                mailingcity                                AS contact_mailing_city, -- mailing address is the primary address -- mailing prefix are the primary
                mailingcountry                             AS contact_mailing_country, -- primary mailing country
                mailingstreet                              AS contact_mailing_street, -- primary mailing street
                mailingpostalcode                          AS contact_postal_code, -- primary mailing post code
                title                                      AS contact_title, -- Conctact's Organizational title for non individual contacts e.g. President. -- 100% Nulls
                usi_company__c                             AS contact_usi_company, -- skip - use account name on account record instead
                usi_marketsegment__c                       AS contact_usi_market_segment, -- picklist that holds marketsegment major and minor
                usi_nickname__c                            AS contact_usi_nickname, -- if name is robert and they go by bob
                usi_region__c                              AS contact_usi_region,
                usi_directmailoptin__c                     AS contact_usi_direct_mail_optin,
                count_opps__c                              AS contact_count_opps, -- a count of how many opportunities are related to that contact
                destination_management_company_ddmc__c     AS contact_destination_management_company, -- redundant - one of the market segmetns
                port__c                                    AS contact_port, -- indicates port (SF, San Diego, NY) - could have a SD port - port is better on the order or event object
                hasoptedoutofemail                         AS contact_email_optout, -- email opt out flag - master flag - definitive
                event_order_count__c                        AS contact_num_orders -- Number of orders associated with the Contact

         FROM customer_staging.sf_hce_customer_contact
     ), ec_event AS(
        Select id as event_id,
                    whoid,
                    whatid,
                    whocount,
                    whatcount,
                    accountid,
                    accountoppid__c,
                    subject as event_subject,
                    activitydatetime as event_time,
                    activitydate as event_date,
                    ownerid event_ownerid,
                    isprivate as event_private,
                    groupeventtype,
                    eventsubtype,
                    db_activity_type__c,
                    location as event_location,
                    description as event_description
        From customer_staging.sf_ec_event
         --limit 100
),      ec_opportunity AS (
                select
                   id as opportunity_id,
                   primary_contact__c,
                   name as opportunity_name,
                   type as opportunity_type,
                   event_type__c as opportunity_event_type,
                   purpose__c as opportunity_purpose,
                   ownerid as opportunity_ownerid,
                   opp_stage__c,
                   leadsource as opportunity_leadsource,
                   accountid as opportunity_acctid,-- account opportunity fk reference
                   event_fiscal_year__c,
                   opportunity_value__c,
                   orders_total__c,
                   actual_order_amount__c,
                   amount opportunity_amount
from public.ecsf_opportunity

where event_fiscal_year__c between 2018 AND 2019

), ec_lead AS(
                Select
                id as lead_id,
                isconverted as lead_converted,
                converteddate as lead_conversion_date,
                convertedaccountid as lead_acct_fk,
                convertedcontactid as lead_cnct_fk,
                convertedopportunityid as lead_opportunity,
                ebms_lead_number__c as nyc_ferry_id,
                lastname as lead_fname,
                firstname as lead_lname,
                name lead_name,
                company as lead_company,
                city as lead_city,
                state as lead_state,
                country as lead_country,
                statecode as lead_state,
                countrycode as lead_countrycd,
                region__c as lead_region,
                phone as lead_phone,
                email as lead_email,
                leadsource as laed_leadsource,
                status as lead_status,
                ownerid as lead_ownerid,
                createddate as lead_created,
                event_date__c as lead_event_date,
                event_type__c as lead_event_type,
                market_segment__c as lead_market_segment,
                market_subsegment__c as lead_subsegment,
                regionf__c,
                description as lead_description,
                campaign__c,
                ls_event_type__c

from public.ecsf_lead
),ec_customer_profile AS(
-- Customer Profile
-- ec_customer profile
select
       cnct_sourceid,
       acct_lname,
       acct_fname
       cnct_name,
       cnct_lname,
       cnct_isperson,
       order_account_email,
       acct_email,
       cnct_email,
       cnct_email_optout,
       order_phone,
       account_phone,
       acct_phone_DNC,
       cnct_phone,
       cnct_mobile,
       acct_site,
       cnct_strategy,
       cnct_mkt_subsegment,
       acct_mkt_segment,
       order_ec_brand,
       cnct_region,
        acct_billingcity,
        acct_billing_street,
        acct_billing_cd,
        acct_billing_state,
        acct_billing_country_cd,
         acct_billing_country,
        cnct_mail_street,
        cnct_mail_city,
        cnct_mail_state,
        cnct_mail_postcode,
        cnct_mail_statecode,
        cnct_mail_country,
       order_reportable_total,
       order_status
from ec_order
left outer join ec_account on ec_order.order_accountfk = ec_account.acct_id
left outer join ec_contact on ec_account.acct_cnct_pk = ec_contact.cnct_id
    )
-- accounts counts by market segment
select
       CASE WHEN upper(acct_mkt_segment) like 'IND%' THEN 'IDC' ELSE 'CHARTER' END as BizType,
       acct_mkt_segment,
       order_ec_brand,
     count( CASE WHEN coalesce(order_account_email, acct_email,cnct_email) IS NOT NULL
                THEN coalesce(order_phone, account_phone,cnct_phone)
            WHEN coalesce(order_phone, account_phone,cnct_phone) IS NOT NULL
                THEN coalesce(order_phone, account_phone,cnct_phone)
            WHEN acct_billing_cd IS NOT NULL
                THEN acct_billing_cd
            ELSE NULL

        END)as no_of_customers,
sum(order_reportable_total) as total_revenue

from ec_customer_profile
where order_status = 'Closed'
group by 1,2,3
order by 5,4,1,2,3 desc
